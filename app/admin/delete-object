// app/api/admin/delete-object/route.ts
// Endpoint TEMPORAL para borrar un objeto de Storage por "path".
// Protegido con ?secret=CRON_SECRET. Úsalo y luego bórralo.
export const runtime = "nodejs";

import { NextRequest, NextResponse } from "next/server";
import { createClient } from "@supabase/supabase-js";

export async function GET(req: NextRequest) {
  try {
    const url = new URL(req.url);
    const secret = url.searchParams.get("secret") || "";
    const path = url.searchParams.get("path") || "";

    // 1) Autorización con CRON_SECRET
    const envSecret = process.env.CRON_SECRET || "";
    if (!envSecret || secret !== envSecret) {
      return NextResponse.json({ ok: false, error: "bad-secret" }, { status: 401 });
    }

    // 2) Validaciones básicas
    if (!path) {
      return NextResponse.json({ ok: false, error: "missing-path" }, { status: 400 });
    }

    // 3) Cliente con SERVICE ROLE (necesario para borrar sin RLS)
    const urlSb = process.env.NEXT_PUBLIC_SUPABASE_URL;
    const keySr = process.env.SUPABASE_SERVICE_ROLE;
    if (!urlSb || !keySr) {
      return NextResponse.json({ ok: false, error: "supabase-credentials-missing" }, { status: 500 });
    }
    const supabase = createClient(urlSb, keySr);

    // 4) Borrar en Storage (bucket 'docs')
    const { data, error } = await supabase.storage.from("docs").remove([path]);
    if (error) {
      return NextResponse.json({ ok: false, error: error.message, path }, { status: 500 });
    }

    return NextResponse.json({ ok: true, removed: data, path });
  } catch (e: any) {
    return NextResponse.json({ ok: false, error: e?.message || "error" }, { status: 500 });
  }
}
